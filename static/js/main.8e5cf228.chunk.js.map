{"version":3,"sources":["App.js","index.js"],"names":["App","grid","setGrid","useState","Array","fill","map","shiftIndex","setShiftIndex","currentWord","setCurrentWord","currentLetterIndex","setCurrentLetterIndex","waitingForNextLetter","setWaitingForNextLetter","showDialog","setShowDialog","dialogMessage","setDialogMessage","fetchRandomWord","async","newWord","axios","get","data","toUpperCase","error","console","useEffect","createText","gridCopy","createLetter","letter","shift","pattern","forEach","_ref","row","col","length","setTimeout","interval","setInterval","clearInterval","_jsxs","className","children","_jsx","rowIndex","cell","colIndex","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e5cf228.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nconst App = () => {\n  const [grid, setGrid] = useState(Array(15).fill().map(() => Array(15).fill(false))); // 15x15 grid\n  const [shiftIndex, setShiftIndex] = useState(15); // Start at column 15\n  const [currentWord, setCurrentWord] = useState(''); // Store the current word\n  const [currentLetterIndex, setCurrentLetterIndex] = useState(0); // Start with the first letter\n  const [waitingForNextLetter, setWaitingForNextLetter] = useState(false); // Flag for letter timing\n  const [showDialog, setShowDialog] = useState(false); // Show dialog between words\n  const [dialogMessage, setDialogMessage] = useState(''); // Message for the dialog box\n\n  // Fetch a random word from the API\n  const fetchRandomWord = async () => {\n    try {\n      \n      const response = await axios.get('https://random-word-api.herokuapp.com/word?number=1');\n      const newWord = response.data[0].toUpperCase();\n      setDialogMessage('Previous Word: '+newWord);\n      setCurrentWord(newWord); // Set word to uppercase\n      setCurrentLetterIndex(0); // Reset letter index\n      setShiftIndex(15); // Reset shift index for new word\n      setShowDialog(false); // Hide dialog when new word starts\n\n\n    } catch (error) {\n      console.error(\"Error fetching word:\", error);\n    }\n  };\n\n  // Call the fetchRandomWord function on initial load\n  useEffect(() => {\n    fetchRandomWord();\n  }, []);\n\n  useEffect(() => {\n    const createLetter = (letter, shift) => {\n      let gridCopy = Array(8).fill().map(() => Array(15).fill(false));\n      \n      const letterPattern = {\n        'A': [\n          [0, 2], [1, 1], [1, 3], [2, 0], [2, 4], [3, 0], [3, 4], [4, 0], [4, 4], [2, 2]\n        ],\n        'B': [\n          [0, 0], [0, 1], [0, 2], [1, 0], [2, 0], [2, 1], [3, 0], [4, 0], [4, 1], [4, 2], [3, 2], [2, 2], [1, 2]\n        ],\n        'C': [\n          [0, 1], [0, 2], [0, 3], [1, 0], [2, 0], [3, 0], [4, 1], [4, 2], [4, 3]\n        ],\n        'D': [\n          [0, 0], [0, 1], [0, 2], [1, 0], [2, 0], [3, 0], [4, 0],[4,1], [4, 2], [3, 2], [2, 2], [1, 2]\n        ],\n        'E': [\n          [0, 0], [0, 1], [0, 2], [1, 0], [2, 0], [3, 0], [4, 0], [4, 1], [4, 2], [2, 1], [2, 2]\n        ],\n        'F': [\n          [0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [2, 1], [2, 2], [0, 1], [0, 2]\n        ],\n        'G': [\n          [0, 1], [0, 2], [0, 3], [1, 0], [2, 0], [3, 0], [4, 1], [4, 2], [4, 3], [3, 4], [2, 3]\n        ],\n        'H': [\n          [0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [2, 2]\n        ],\n        'I': [\n          [0, 2], [1, 2], [2, 2], [3, 2], [4, 2]\n        ],\n        'J': [\n          [0, 3], [1, 3], [2, 3], [3, 3], [4, 1], [4, 2]\n        ],\n        'K': [\n          [0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [2, 1], [1, 2], [3, 2], [0, 3], [4, 3]\n        ],\n        'L': [\n          [0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [4, 1], [4, 2]\n        ],\n        'M': [\n          [0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [1, 1], [2, 2], [1, 3], [0, 4], [1, 4], [2, 4],[3,4],[4,4]\n        ],\n        'N': [\n          [0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [1, 1], [2, 2], [3, 3]\n        ],\n        'O': [\n          [0, 1], [0, 2], [0, 3], [1, 0], [2, 0], [3, 0], [4, 1], [4, 2], [4, 3], [1, 4], [3, 4]\n        ],\n        'P': [\n          [0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [0, 1], [0, 2], [1, 3], [2, 3], [3, 2]\n        ],\n        'Q': [\n          [0, 1], [0, 2], [0, 3], [1, 0], [2, 0], [3, 0], [4, 1], [4, 2], [4, 3], [1, 4], [3, 4], [2, 2], [3, 3], [4, 4]\n        ],\n        'R': [\n          [0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [0, 1], [0, 2], [1, 2], [2, 2], [2, 1], [4, 2]\n        ],\n        'S': [\n          [0, 1], [0, 2], [1, 0], [2, 1], [2, 2], [2, 3], [3, 3], [4, 1], [4, 2]\n        ],\n        'T': [\n          [0, 1], [0, 2], [0, 3], [1, 2], [2, 2], [3, 2], [4, 2]\n        ],\n        'U': [\n          [0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [0, 4], [1, 4], [2, 4], [3, 4], [4, 1], [4, 2], [4, 3]\n        ],\n        'V': [\n          [0, 0],[1,0], [2, 1], [3, 2], [2, 3], [1, 4], [0, 4]\n        ],\n        'W': [\n          [0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [3, 1], [2, 2], [3, 3], [4, 4],[3,4],[2,4],[1,4],[0,4]\n        ],\n        'X': [\n          [0, 0], [0, 4], [1, 1], [1, 3], [2, 2], [3, 1], [3, 3], [4, 0], [4, 4]\n        ],\n        'Y': [\n          [0, 0], [0, 4], [1, 1], [1, 3], [2, 2], [3, 2], [4, 2]\n        ],\n        'Z': [\n          [0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 3], [2, 2], [3, 1], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]\n        ]\n      };\n\n      const pattern = letterPattern[letter];\n      if (pattern) {\n        pattern.forEach(([row, col]) => {\n          if (col + shift < 15) gridCopy[row][col + shift] = true;\n        });\n      }\n\n      return gridCopy;\n    };\n\n    const createText = () => {\n      let gridCopy = Array(8).fill().map(() => Array(15).fill(false));\n      const letter = currentWord[currentLetterIndex];\n      gridCopy = createLetter(letter, shiftIndex);\n\n      setGrid([...gridCopy]);\n\n      if (!waitingForNextLetter) {\n        if (shiftIndex > -2) {\n          setShiftIndex(shiftIndex - 1);\n        } else {\n          if (currentLetterIndex < currentWord.length - 1) {\n            setWaitingForNextLetter(true);\n            setTimeout(() => {\n              setWaitingForNextLetter(false);\n              setCurrentLetterIndex(currentLetterIndex + 1);\n              setShiftIndex(15);\n            }, 500); // Adjust timing between letters\n          } else {\n            setShowDialog(true); // Show dialog after word completes\n            setTimeout(() => {\n              setShowDialog(false);\n              fetchRandomWord(); // Fetch a new random word\n            }, 2000); // Show dialog for 2 seconds\n          }\n        }\n      }\n    };\n\n    const interval = setInterval(() => {\n      if (!waitingForNextLetter && !showDialog) createText();\n    }, 60);\n\n    return () => clearInterval(interval);\n  }, [shiftIndex, currentLetterIndex, currentWord, waitingForNextLetter, showDialog]);\n\n  return (\n    <div className=\"App\">\n      <h1>How Sharp Are Your Senses?</h1>\n      <div className=\"grid-container\">\n        {grid.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"grid-row\">\n            {row.map((cell, colIndex) => (\n              <div\n                key={colIndex}\n                className={`grid-cell ${cell ? 'active' : ''}`}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n      {showDialog && (\n        <div className=\"dialog\">\n          <p>{dialogMessage}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n/*\n// Define the pattern of a letter. For simplicity, using only \"H\" and \"O\" here as an example.\n      const letterPattern = {\n        'A': [\n          [0, 2], [1, 1], [1, 3], [2, 0], [2, 4], [3, 0], [3, 4], [4, 0], [4, 4], [2, 2]\n        ],\n        'B': [\n          [0, 0], [0, 1], [0, 2], [1, 0], [2, 0], [2, 1], [3, 0], [4, 0], [4, 1], [4, 2], [3, 2], [2, 2], [1, 2]\n        ],\n        'C': [\n          [0, 1], [0, 2], [0, 3], [1, 0], [2, 0], [3, 0], [4, 1], [4, 2], [4, 3]\n        ],\n        'D': [\n          [0, 0], [0, 1], [0, 2], [1, 0], [2, 0], [3, 0], [4, 0],[4,1], [4, 2], [3, 2], [2, 2], [1, 2]\n        ],\n        'E': [\n          [0, 0], [0, 1], [0, 2], [1, 0], [2, 0], [3, 0], [4, 0], [4, 1], [4, 2], [2, 1], [2, 2]\n        ],\n        'F': [\n          [0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [2, 1], [2, 2], [0, 1], [0, 2]\n        ],\n        'G': [\n          [0, 1], [0, 2], [0, 3], [1, 0], [2, 0], [3, 0], [4, 1], [4, 2], [4, 3], [3, 4], [2, 3]\n        ],\n        'H': [\n          [0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [2, 2]\n        ],\n        'I': [\n          [0, 2], [1, 2], [2, 2], [3, 2], [4, 2]\n        ],\n        'J': [\n          [0, 3], [1, 3], [2, 3], [3, 3], [4, 1], [4, 2]\n        ],\n        'K': [\n          [0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [2, 1], [1, 2], [3, 2], [0, 3], [4, 3]\n        ],\n        'L': [\n          [0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [4, 1], [4, 2]\n        ],\n        'M': [\n          [0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [1, 1], [2, 2], [1, 3], [0, 4], [1, 4], [2, 4],[3,4],[4,4]\n        ],\n        'N': [\n          [0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [1, 1], [2, 2], [3, 3]\n        ],\n        'O': [\n          [0, 1], [0, 2], [0, 3], [1, 0], [2, 0], [3, 0], [4, 1], [4, 2], [4, 3], [1, 4], [3, 4]\n        ],\n        'P': [\n          [0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [0, 1], [0, 2], [1, 3], [2, 3], [3, 2]\n        ],\n        'Q': [\n          [0, 1], [0, 2], [0, 3], [1, 0], [2, 0], [3, 0], [4, 1], [4, 2], [4, 3], [1, 4], [3, 4], [2, 2], [3, 3], [4, 4]\n        ],\n        'R': [\n          [0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [0, 1], [0, 2], [1, 2], [2, 2], [2, 1], [4, 2]\n        ],\n        'S': [\n          [0, 1], [0, 2], [1, 0], [2, 1], [2, 2], [2, 3], [3, 3], [4, 1], [4, 2]\n        ],\n        'T': [\n          [0, 1], [0, 2], [0, 3], [1, 2], [2, 2], [3, 2], [4, 2]\n        ],\n        'U': [\n          [0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [0, 4], [1, 4], [2, 4], [3, 4], [4, 1], [4, 2], [4, 3]\n        ],\n        'V': [\n          [0, 0],[1,0], [2, 1], [3, 2], [2, 3], [1, 4], [0, 4]\n        ],\n        'W': [\n          [0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [3, 1], [2, 2], [3, 3], [4, 4],[3,4],[2,4],[1,4],[0,4]\n        ],\n        'X': [\n          [0, 0], [0, 4], [1, 1], [1, 3], [2, 2], [3, 1], [3, 3], [4, 0], [4, 4]\n        ],\n        'Y': [\n          [0, 0], [0, 4], [1, 1], [1, 3], [2, 2], [3, 2], [4, 2]\n        ],\n        'Z': [\n          [0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 3], [2, 2], [3, 1], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]\n        ]\n      };\n      */"],"sourceRoot":""}